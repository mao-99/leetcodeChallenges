Problem: Given an array of strings strs, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once

Example 1:Input: strs = ["eat","tea","tan","ate","nat","bat"], Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Example 2: Input: strs = [""], Output: [[""]]

Example 3: Input: strs = ["a"], Output: [["a"]]

Solution: Time - O(n^2) 
This solution passes 111/120 test cases, and fails by exceeding the time limit on large inputs

#include <string>
class Solution {
public:
    string generateSequence(string val){
        int seq[26] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
        string sequence = "";
        for (int i = 0; i < val.length(); i++){
            int intEq = val[i] - 97;
            seq[intEq] += 1;
        }
        for (int i = 0; i < 26; i++){
            sequence += to_string(seq[i]);
            sequence += " ";
        }
        return sequence;
    }
    
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        vector <vector<string>> groups;
        for (int i = 0; i < strs.size(); i++){
            string hash = generateSequence(strs.at(i));
            if (groups.size() == 0){
                groups.push_back({strs.at(i)});
            }
            else{
                for (int j = 0; j < groups.size(); j++){
                    if (generateSequence(groups.at(j).at(0)) == hash){
                        groups.at(j).push_back(strs.at(i));
                        break;
                    }
                    if (j == groups.size() - 1){
                        if (generateSequence(groups.at(j).at(0)) != hash){
                            groups.push_back({strs.at(i)});
                            break;
                        }
                    }
                }
            }
        }

        return groups;
    }
};

